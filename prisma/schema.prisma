generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Station {
  id                  Int       @id @default(autoincrement())
  nanoid              String?   @unique @db.VarChar(8)
  name                String
  country             String
  genre               String?
  subgenre            String?
  type                String?
  streamUrl           String
  favicon             String?
  logo                String?
  local_image_url     String?
  homepage            String?
  latitude            Float?
  longitude           Float?
  city                String?
  state               String?
  metadataApiUrl      String?
  metadataApiType     String?
  metadataFormat      String?
  metadataFields      String?
  adFilterPatterns    String?
  description         String?
  language            String?
  frequency           String?
  establishedYear     Int?
  owner               String?
  bitrate             Int?
  codec               String?
  facebookUrl         String?
  twitterUrl          String?
  instagramUrl        String?
  youtubeUrl          String?
  email               String?
  phone               String?
  address             String?
  schedule            String?
  programs            String?
  tags                String?
  timezone            String?
  clickcount          Int?
  votes               Int?
  radioBrowserUuid    String?
  isActive            Boolean   @default(true)
  lastPingCheck       DateTime?
  lastPingSuccess     Boolean?
  consecutiveFailures Int       @default(0)
  userReports         Int       @default(0)
  adminNotes          String?
  qualityScore        Float?
  feedbackCount       Int       @default(0)
  editorsPick         Boolean   @default(false)
  featured            Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now())
}

model StationFeedback {
  id            Int      @id @default(autoincrement())
  stationId     Int
  stationNanoid String?  @db.VarChar(8)
  userId        Int?
  feedbackType  String
  details       String?
  ipAddress     String?
  resolved      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  User          User?    @relation(fields: [userId], references: [id])
}

model StationPlayHistory {
  id            String   @id
  stationId     Int?
  stationNanoid String?  @db.VarChar(8)
  trackId       String
  playedAt      DateTime @default(now())
  source        String
  showName      String?
  djName        String?
  Track         Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@index([playedAt])
  @@index([stationId, playedAt])
  @@index([stationNanoid, playedAt])
  @@index([trackId, playedAt])
}

model Track {
  id                 String               @id
  title              String
  artist             String?
  album              String?
  artwork            String?
  duration           Int?
  normalizedTitle    String
  normalizedArtist   String?
  spotifyId          String?
  itunesId           String?
  genre              String?
  releaseDate        DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  StationPlayHistory StationPlayHistory[]

  @@unique([normalizedTitle, normalizedArtist])
  @@index([createdAt])
  @@index([normalizedTitle])
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  password         String
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())
  StationFeedback  StationFeedback[]
  UserFavorites    UserFavorites[]
}

model UserFavorites {
  id            Int      @id @default(autoincrement())
  userId        Int
  stationId     Int
  stationNanoid String?  @db.VarChar(8)
  createdAt     DateTime @default(now())
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stationId])
  @@unique([userId, stationNanoid])
}
